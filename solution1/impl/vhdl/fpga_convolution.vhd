-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fpga_convolution is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fpga_convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fpga_convolution,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=258,HLS_SYN_DSP=4,HLS_SYN_FF=3306,HLS_SYN_LUT=2069}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv17_10A00 : STD_LOGIC_VECTOR (16 downto 0) := "10000101000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10A00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000101000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv17_11464 : STD_LOGIC_VECTOR (16 downto 0) := "10001010001100100";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_109F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000100111110110";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_10A : STD_LOGIC_VECTOR (11 downto 0) := "000100001010";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_r : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_375_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_cast_reg_696 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_fu_389_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_reg_701 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal image2_sum_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal image2_sum_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_3_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_3_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal pos_6_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond3_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_5_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_3_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_9_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_4_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond2_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_cast_cast_fu_511_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal counter_cast_cast_reg_764 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal counter_1_fu_521_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal counter_1_reg_772 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp1_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_position_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_position_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_557_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_reg_787 : STD_LOGIC_VECTOR (17 downto 0);
    signal column_cast5_fu_561_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal column_cast5_reg_792 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal column_cast4_fu_565_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal column_cast4_reg_797 : STD_LOGIC_VECTOR (17 downto 0);
    signal column_1_fu_575_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal column_1_reg_805 : STD_LOGIC_VECTOR (3 downto 0);
    signal output6_sum_fu_581_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal output6_sum_reg_810 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond1_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_4_fu_591_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_4_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal position_2_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal position_2_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_1_fu_609_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_1_reg_828 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal next_mul_fu_615_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_833 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_630_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_reg_838 : STD_LOGIC_VECTOR (17 downto 0);
    signal next_mul8_fu_635_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul8_reg_843 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel4_sum_fu_650_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal kernel4_sum_reg_848 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal empty_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_9_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tempsum_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal empty_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_ce0 : STD_LOGIC;
    signal empty_we0 : STD_LOGIC;
    signal empty_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_1_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_1_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal pos_2_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos1_reg_246 : STD_LOGIC_VECTOR (16 downto 0);
    signal flag_2_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_reg_269 : STD_LOGIC_VECTOR (16 downto 0);
    signal position_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempsum_1_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal tempsum_2_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_338 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul7_reg_349 : STD_LOGIC_VECTOR (6 downto 0);
    signal pos1_cast6_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel4_sum_cast_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output6_sum_cast_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal image_count_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_count_1_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_365_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_379_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal image1_fu_393_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_418_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_527_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal position_1_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_2_op_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast7_fu_621_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_fu_625_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sum3_fu_641_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum3_cast_cast_fu_646_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component fpga_convolution_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_convolution_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_convolution_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        image_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpga_convolution_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fpga_convolution_AXILiteS_s_axi_U : component fpga_convolution_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        image_r => image_r,
        kernel => kernel,
        output_r => output_r);

    fpga_convolution_gmem_m_axi_U : component fpga_convolution_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => output6_sum_cast_fu_679_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tempsum_1_reg_291,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    empty_U : component fpga_convolution_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 70756,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => empty_address0,
        ce0 => empty_ce0,
        we0 => empty_we0,
        d0 => empty_d0,
        q0 => empty_q0);

    fpga_convolution_cud_U0 : component fpga_convolution_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => empty_9_reg_864,
        din1 => reg_360,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    column_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond_fu_603_p2))) then 
                column_reg_304 <= column_1_reg_805;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = tmp_7_fu_515_p2))) then 
                column_reg_304 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    counter_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_499_p2))) then 
                counter_reg_269 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (gmem_BVALID = ap_const_logic_1))) then 
                counter_reg_269 <= counter_1_reg_772;
            end if; 
        end if;
    end process;

    flag_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                flag_1_reg_224 <= flag_reg_188;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_465_p2))) then 
                flag_1_reg_224 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    flag_2_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_499_p2))) then 
                flag_2_reg_257 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (gmem_BVALID = ap_const_logic_1))) then 
                flag_2_reg_257 <= flag_4_reg_815;
            end if; 
        end if;
    end process;

    flag_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                flag_reg_188 <= flag_3_fu_482_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                flag_reg_188 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    image_count_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_1) and (icmp_fu_428_p2 = ap_const_lv1_0))) then 
                image_count_fu_112 <= image_count_1_fu_442_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                image_count_fu_112 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul7_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond1_fu_569_p2))) then 
                phi_mul7_reg_349 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                phi_mul7_reg_349 <= next_mul8_reg_843;
            end if; 
        end if;
    end process;

    phi_mul_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond1_fu_569_p2))) then 
                phi_mul_reg_338 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                phi_mul_reg_338 <= next_mul_reg_833;
            end if; 
        end if;
    end process;

    pos1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_0))) then 
                pos1_reg_246 <= ap_const_lv17_10A00;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond2_fu_499_p2))) then 
                pos1_reg_246 <= pos_4_fu_505_p2;
            end if; 
        end if;
    end process;

    pos_1_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond3_fu_465_p2))) then 
                pos_1_reg_213 <= pos_6_fu_470_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp_fu_428_p2))) then 
                pos_1_reg_213 <= pos_reg_200;
            end if; 
        end if;
    end process;

    pos_2_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                pos_2_reg_236 <= pos_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_465_p2))) then 
                pos_2_reg_236 <= pos_5_fu_476_p2;
            end if; 
        end if;
    end process;

    pos_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                pos_reg_200 <= tmp_9_fu_488_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pos_reg_200 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    position_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_499_p2))) then 
                position_reg_280 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (gmem_BVALID = ap_const_logic_1))) then 
                position_reg_280 <= position_2_reg_820;
            end if; 
        end if;
    end process;

    row_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond1_fu_569_p2))) then 
                row_reg_327 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                row_reg_327 <= row_1_reg_828;
            end if; 
        end if;
    end process;

    tempsum_1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond_fu_603_p2))) then 
                tempsum_1_reg_291 <= tempsum_2_reg_315;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = tmp_7_fu_515_p2))) then 
                tempsum_1_reg_291 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tempsum_2_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond1_fu_569_p2))) then 
                tempsum_2_reg_315 <= tempsum_1_reg_291;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                tempsum_2_reg_315 <= tempsum_fu_674_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                column_1_reg_805 <= column_1_fu_575_p2;
                    column_cast4_reg_797(3 downto 0) <= column_cast4_fu_565_p1(3 downto 0);
                    column_cast5_reg_792(3 downto 0) <= column_cast5_fu_561_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                counter_1_reg_772 <= counter_1_fu_521_p2;
                    counter_cast_cast_reg_764(16 downto 0) <= counter_cast_cast_fu_511_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (gmem_RVALID = ap_const_logic_1))) then
                empty_9_reg_864 <= empty_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = exitcond1_fu_569_p2))) then
                flag_4_reg_815 <= flag_4_fu_591_p3;
                output6_sum_reg_810 <= output6_sum_fu_581_p2;
                position_2_reg_820 <= position_2_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = tmp_7_fu_515_p2))) then
                icmp1_reg_777 <= icmp1_fu_537_p2;
                p_position_reg_782 <= p_position_fu_549_p3;
                tmp_6_reg_787 <= tmp_6_fu_557_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_1) and (icmp_fu_428_p2 = ap_const_lv1_0))) then
                image2_sum_reg_717 <= image2_sum_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond_fu_603_p2))) then
                kernel4_sum_reg_848 <= kernel4_sum_fu_650_p2;
                next_mul8_reg_843 <= next_mul8_fu_635_p2;
                next_mul_reg_833 <= next_mul_fu_615_p2;
                tmp_4_reg_838 <= tmp_4_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp_fu_428_p2))) then
                pos_3_reg_722 <= pos_3_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (gmem_RVALID = ap_const_logic_1)))) then
                reg_360 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                row_1_reg_828 <= row_1_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_3_cast_reg_696(29 downto 0) <= tmp_3_cast_fu_375_p1(29 downto 0);
                    tmp_6_cast_reg_701(29 downto 0) <= tmp_6_cast_fu_389_p1(29 downto 0);
                    tmp_s_reg_706(29 downto 0) <= tmp_s_fu_403_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_8_reg_869 <= grp_fu_669_p2;
            end if;
        end if;
    end process;
    tmp_3_cast_reg_696(30) <= '0';
    tmp_6_cast_reg_701(30) <= '0';
    tmp_s_reg_706(31 downto 30) <= "00";
    counter_cast_cast_reg_764(30 downto 17) <= "00000000000000";
    column_cast5_reg_792(6 downto 4) <= "000";
    column_cast4_reg_797(17 downto 4) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state35, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state2, tmp_fu_412_p2, icmp_fu_428_p2, ap_sig_ioackin_gmem_ARREADY, ap_CS_fsm_state12, exitcond3_fu_465_p2, ap_CS_fsm_state14, exitcond2_fu_499_p2, ap_CS_fsm_state15, tmp_7_fu_515_p2, ap_CS_fsm_state16, exitcond1_fu_569_p2, ap_CS_fsm_state17, exitcond_fu_603_p2, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp_fu_428_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_465_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond2_fu_499_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_7_fu_515_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond1_fu_569_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond_fu_603_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_gmem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);

    ap_done_assign_proc : process(ap_CS_fsm_state15, tmp_7_fu_515_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_7_fu_515_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, tmp_7_fu_515_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = tmp_7_fu_515_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    column_1_fu_575_p2 <= std_logic_vector(unsigned(column_reg_304) + unsigned(ap_const_lv4_1));
    column_cast4_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_reg_304),18));
    column_cast5_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_reg_304),7));
    counter_1_fu_521_p2 <= std_logic_vector(unsigned(counter_reg_269) + unsigned(ap_const_lv17_1));
    counter_cast_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(counter_reg_269),31));

    empty_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state24, pos_reg_200, pos_1_reg_213, ap_CS_fsm_state11, pos1_cast6_fu_494_p1, tmp_4_cast_fu_665_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            empty_address0 <= tmp_4_cast_fu_665_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            empty_address0 <= pos1_cast6_fu_494_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            empty_address0 <= pos_1_reg_213(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            empty_address0 <= pos_reg_200(17 - 1 downto 0);
        else 
            empty_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_d0_assign_proc : process(reg_360, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            empty_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            empty_d0 <= reg_360;
        else 
            empty_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    empty_we0_assign_proc : process(ap_CS_fsm_state12, exitcond3_fu_465_p2, ap_CS_fsm_state14, exitcond2_fu_499_p2, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond3_fu_465_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond2_fu_499_p2)) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            empty_we0 <= ap_const_logic_1;
        else 
            empty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_569_p2 <= "1" when (column_reg_304 = ap_const_lv4_B) else "0";
    exitcond2_fu_499_p2 <= "1" when (pos1_reg_246 = ap_const_lv17_11464) else "0";
    exitcond3_fu_465_p2 <= "1" when (pos_1_reg_213 = pos_3_reg_722) else "0";
    exitcond_fu_603_p2 <= "1" when (row_reg_327 = ap_const_lv4_B) else "0";
    flag_2_op_fu_585_p2 <= std_logic_vector(unsigned(flag_2_reg_257) + unsigned(ap_const_lv32_1));
    flag_3_fu_482_p2 <= std_logic_vector(unsigned(flag_1_reg_224) + unsigned(ap_const_lv32_1));
    flag_4_fu_591_p3 <= 
        ap_const_lv32_1 when (icmp1_reg_777(0) = '1') else 
        flag_2_op_fu_585_p2;

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, image2_sum_reg_717, kernel4_sum_cast_fu_655_p1, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                gmem_ARADDR <= kernel4_sum_cast_fu_655_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                gmem_ARADDR <= image2_sum_reg_717;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state29, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state35, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (gmem_BVALID = ap_const_logic_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state25, gmem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (gmem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (gmem_RVALID = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state30, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp1_fu_537_p2 <= "1" when (signed(tmp_5_fu_527_p4) > signed(ap_const_lv24_0)) else "0";
    icmp_fu_428_p2 <= "1" when (signed(tmp_3_fu_418_p4) > signed(ap_const_lv24_0)) else "0";
    image1_fu_393_p4 <= image_r(31 downto 2);
    image2_sum_fu_437_p2 <= std_logic_vector(unsigned(tmp_s_reg_706) + unsigned(image_count_fu_112));
    image_count_1_fu_442_p2 <= std_logic_vector(unsigned(image_count_fu_112) + unsigned(ap_const_lv32_1));
    kernel4_sum_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel4_sum_reg_848),32));
    kernel4_sum_fu_650_p2 <= std_logic_vector(unsigned(sum3_cast_cast_fu_646_p1) + unsigned(tmp_6_cast_reg_701));
    next_mul8_fu_635_p2 <= std_logic_vector(unsigned(phi_mul7_reg_349) + unsigned(ap_const_lv7_B));
    next_mul_fu_615_p2 <= std_logic_vector(unsigned(phi_mul_reg_338) + unsigned(ap_const_lv12_10A));
    output6_sum_cast_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output6_sum_reg_810),32));
    output6_sum_fu_581_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_696) + unsigned(counter_cast_cast_reg_764));
    p_position_fu_549_p3 <= 
        position_1_fu_543_p2 when (icmp1_fu_537_p2(0) = '1') else 
        position_reg_280;
    pos1_cast6_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos1_reg_246),32));
    pos_3_fu_453_p2 <= std_logic_vector(unsigned(pos_reg_200) + unsigned(ap_const_lv32_A));
    pos_4_fu_505_p2 <= std_logic_vector(unsigned(pos1_reg_246) + unsigned(ap_const_lv17_1));
    pos_5_fu_476_p2 <= std_logic_vector(unsigned(pos_reg_200) + unsigned(ap_const_lv32_9));
    pos_6_fu_470_p2 <= std_logic_vector(unsigned(pos_1_reg_213) + unsigned(ap_const_lv32_1));
    position_1_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv32_A) + unsigned(position_reg_280));
    position_2_fu_598_p2 <= std_logic_vector(unsigned(p_position_reg_782) + unsigned(ap_const_lv32_1));
    row_1_fu_609_p2 <= std_logic_vector(unsigned(row_reg_327) + unsigned(ap_const_lv4_1));
    sum3_cast_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_641_p2),31));
    sum3_fu_641_p2 <= std_logic_vector(unsigned(column_cast5_reg_792) + unsigned(phi_mul7_reg_349));
    tempsum_fu_674_p2 <= std_logic_vector(unsigned(tempsum_2_reg_315) + unsigned(tmp_8_reg_869));
    tmp1_fu_625_p2 <= std_logic_vector(unsigned(tmp_2_cast7_fu_621_p1) + unsigned(tmp_6_reg_787));
    tmp_1_fu_365_p4 <= output_r(31 downto 2);
    tmp_2_cast7_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_338),18));
    tmp_2_fu_379_p4 <= kernel(31 downto 2);
    tmp_3_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_365_p4),31));
    tmp_3_fu_418_p4 <= flag_reg_188(31 downto 8);
    tmp_4_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_838),32));
    tmp_4_fu_630_p2 <= std_logic_vector(unsigned(column_cast4_reg_797) + unsigned(tmp1_fu_625_p2));
    tmp_5_fu_527_p4 <= flag_2_reg_257(31 downto 8);
    tmp_6_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_379_p4),31));
    tmp_6_fu_557_p1 <= p_position_fu_549_p3(18 - 1 downto 0);
    tmp_7_fu_515_p2 <= "1" when (signed(position_reg_280) < signed(ap_const_lv32_109F6)) else "0";
    tmp_9_fu_488_p2 <= std_logic_vector(unsigned(pos_2_reg_236) + unsigned(ap_const_lv32_1));
    tmp_fu_412_p2 <= "1" when (signed(pos_reg_200) < signed(ap_const_lv32_10A00)) else "0";
    tmp_s_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image1_fu_393_p4),32));
end behav;
