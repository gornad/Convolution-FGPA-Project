// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fpga_convolution.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fpga_convolution::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fpga_convolution::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<35> fpga_convolution::ap_ST_fsm_state1 = "1";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state2 = "10";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state3 = "100";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state4 = "1000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state5 = "10000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state6 = "100000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state7 = "1000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state8 = "10000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state9 = "100000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state10 = "1000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state11 = "10000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state12 = "100000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<35> fpga_convolution::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<32> fpga_convolution::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fpga_convolution::ap_const_lv32_2 = "10";
const sc_lv<32> fpga_convolution::ap_const_lv32_9 = "1001";
const sc_lv<32> fpga_convolution::ap_const_lv32_11 = "10001";
const sc_lv<32> fpga_convolution::ap_const_lv32_18 = "11000";
const sc_lv<32> fpga_convolution::ap_const_lv32_1C = "11100";
const sc_lv<32> fpga_convolution::ap_const_lv32_1D = "11101";
const sc_lv<32> fpga_convolution::ap_const_lv32_22 = "100010";
const int fpga_convolution::C_S_AXI_DATA_WIDTH = "100000";
const int fpga_convolution::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fpga_convolution::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fpga_convolution::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int fpga_convolution::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fpga_convolution::ap_const_lv32_1 = "1";
const sc_lv<1> fpga_convolution::ap_const_lv1_1 = "1";
const sc_lv<1> fpga_convolution::ap_const_lv1_0 = "0";
const sc_lv<32> fpga_convolution::ap_const_lv32_B = "1011";
const sc_lv<32> fpga_convolution::ap_const_lv32_C = "1100";
const sc_lv<32> fpga_convolution::ap_const_lv32_D = "1101";
const sc_lv<32> fpga_convolution::ap_const_lv32_E = "1110";
const sc_lv<32> fpga_convolution::ap_const_lv32_F = "1111";
const sc_lv<32> fpga_convolution::ap_const_lv32_10 = "10000";
const sc_lv<32> fpga_convolution::ap_const_lv32_17 = "10111";
const sc_lv<32> fpga_convolution::ap_const_lv32_1A = "11010";
const sc_lv<32> fpga_convolution::ap_const_lv32_1B = "11011";
const sc_lv<32> fpga_convolution::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> fpga_convolution::ap_const_lv32_A = "1010";
const sc_lv<17> fpga_convolution::ap_const_lv17_10A00 = "10000101000000000";
const sc_lv<17> fpga_convolution::ap_const_lv17_0 = "00000000000000000";
const sc_lv<4> fpga_convolution::ap_const_lv4_0 = "0000";
const sc_lv<12> fpga_convolution::ap_const_lv12_0 = "000000000000";
const sc_lv<7> fpga_convolution::ap_const_lv7_0 = "0000000";
const sc_lv<3> fpga_convolution::ap_const_lv3_0 = "000";
const sc_lv<2> fpga_convolution::ap_const_lv2_0 = "00";
const sc_lv<4> fpga_convolution::ap_const_lv4_F = "1111";
const sc_lv<32> fpga_convolution::ap_const_lv32_1F = "11111";
const sc_lv<32> fpga_convolution::ap_const_lv32_10A00 = "10000101000000000";
const sc_lv<32> fpga_convolution::ap_const_lv32_8 = "1000";
const sc_lv<24> fpga_convolution::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<17> fpga_convolution::ap_const_lv17_11464 = "10001010001100100";
const sc_lv<17> fpga_convolution::ap_const_lv17_1 = "1";
const sc_lv<32> fpga_convolution::ap_const_lv32_109F6 = "10000100111110110";
const sc_lv<4> fpga_convolution::ap_const_lv4_B = "1011";
const sc_lv<4> fpga_convolution::ap_const_lv4_1 = "1";
const sc_lv<12> fpga_convolution::ap_const_lv12_10A = "100001010";
const sc_lv<7> fpga_convolution::ap_const_lv7_B = "1011";
const sc_lv<32> fpga_convolution::ap_const_lv32_19 = "11001";
const bool fpga_convolution::ap_const_boolean_1 = true;

fpga_convolution::fpga_convolution(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fpga_convolution_AXILiteS_s_axi_U = new fpga_convolution_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("fpga_convolution_AXILiteS_s_axi_U");
    fpga_convolution_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    fpga_convolution_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    fpga_convolution_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    fpga_convolution_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    fpga_convolution_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    fpga_convolution_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    fpga_convolution_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    fpga_convolution_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    fpga_convolution_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    fpga_convolution_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    fpga_convolution_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    fpga_convolution_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    fpga_convolution_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    fpga_convolution_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    fpga_convolution_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    fpga_convolution_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    fpga_convolution_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    fpga_convolution_AXILiteS_s_axi_U->ACLK(ap_clk);
    fpga_convolution_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    fpga_convolution_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    fpga_convolution_AXILiteS_s_axi_U->ap_start(ap_start);
    fpga_convolution_AXILiteS_s_axi_U->interrupt(interrupt);
    fpga_convolution_AXILiteS_s_axi_U->ap_ready(ap_ready);
    fpga_convolution_AXILiteS_s_axi_U->ap_done(ap_done);
    fpga_convolution_AXILiteS_s_axi_U->ap_idle(ap_idle);
    fpga_convolution_AXILiteS_s_axi_U->image_r(image_r);
    fpga_convolution_AXILiteS_s_axi_U->kernel(kernel);
    fpga_convolution_AXILiteS_s_axi_U->output_r(output_r);
    fpga_convolution_gmem_m_axi_U = new fpga_convolution_gmem_m_axi<32,32,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("fpga_convolution_gmem_m_axi_U");
    fpga_convolution_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    fpga_convolution_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    fpga_convolution_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    fpga_convolution_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    fpga_convolution_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    fpga_convolution_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    fpga_convolution_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    fpga_convolution_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    fpga_convolution_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    fpga_convolution_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    fpga_convolution_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    fpga_convolution_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    fpga_convolution_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    fpga_convolution_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    fpga_convolution_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    fpga_convolution_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    fpga_convolution_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    fpga_convolution_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    fpga_convolution_gmem_m_axi_U->WID(m_axi_gmem_WID);
    fpga_convolution_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    fpga_convolution_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    fpga_convolution_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    fpga_convolution_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    fpga_convolution_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    fpga_convolution_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    fpga_convolution_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    fpga_convolution_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    fpga_convolution_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    fpga_convolution_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    fpga_convolution_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    fpga_convolution_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    fpga_convolution_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    fpga_convolution_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    fpga_convolution_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    fpga_convolution_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    fpga_convolution_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    fpga_convolution_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    fpga_convolution_gmem_m_axi_U->RID(m_axi_gmem_RID);
    fpga_convolution_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    fpga_convolution_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    fpga_convolution_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    fpga_convolution_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    fpga_convolution_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    fpga_convolution_gmem_m_axi_U->BID(m_axi_gmem_BID);
    fpga_convolution_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    fpga_convolution_gmem_m_axi_U->ACLK(ap_clk);
    fpga_convolution_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    fpga_convolution_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    fpga_convolution_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    fpga_convolution_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    fpga_convolution_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    fpga_convolution_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    fpga_convolution_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    fpga_convolution_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    fpga_convolution_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    fpga_convolution_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    fpga_convolution_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    fpga_convolution_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    fpga_convolution_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    fpga_convolution_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    fpga_convolution_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    fpga_convolution_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    fpga_convolution_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    fpga_convolution_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    fpga_convolution_gmem_m_axi_U->I_RID(gmem_RID);
    fpga_convolution_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    fpga_convolution_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    fpga_convolution_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    fpga_convolution_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    fpga_convolution_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    fpga_convolution_gmem_m_axi_U->I_AWADDR(output6_sum_cast_fu_679_p1);
    fpga_convolution_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    fpga_convolution_gmem_m_axi_U->I_AWLEN(ap_var_for_const2);
    fpga_convolution_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    fpga_convolution_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    fpga_convolution_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    fpga_convolution_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    fpga_convolution_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    fpga_convolution_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    fpga_convolution_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    fpga_convolution_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    fpga_convolution_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    fpga_convolution_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    fpga_convolution_gmem_m_axi_U->I_WDATA(tempsum_1_reg_291);
    fpga_convolution_gmem_m_axi_U->I_WID(ap_var_for_const1);
    fpga_convolution_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    fpga_convolution_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    fpga_convolution_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    fpga_convolution_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    fpga_convolution_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    fpga_convolution_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    fpga_convolution_gmem_m_axi_U->I_BID(gmem_BID);
    fpga_convolution_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    empty_U = new fpga_convolution_bkb("empty_U");
    empty_U->clk(ap_clk);
    empty_U->reset(ap_rst_n_inv);
    empty_U->address0(empty_address0);
    empty_U->ce0(empty_ce0);
    empty_U->we0(empty_we0);
    empty_U->d0(empty_d0);
    empty_U->q0(empty_q0);
    fpga_convolution_cud_U0 = new fpga_convolution_cud<1,2,32,32,32>("fpga_convolution_cud_U0");
    fpga_convolution_cud_U0->clk(ap_clk);
    fpga_convolution_cud_U0->reset(ap_rst_n_inv);
    fpga_convolution_cud_U0->din0(empty_9_reg_864);
    fpga_convolution_cud_U0->din1(reg_360);
    fpga_convolution_cud_U0->ce(ap_var_for_const0);
    fpga_convolution_cud_U0->dout(grp_fu_669_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_7_fu_515_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_7_fu_515_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_column_1_fu_575_p2);
    sensitive << ( column_reg_304 );

    SC_METHOD(thread_column_cast4_fu_565_p1);
    sensitive << ( column_reg_304 );

    SC_METHOD(thread_column_cast5_fu_561_p1);
    sensitive << ( column_reg_304 );

    SC_METHOD(thread_counter_1_fu_521_p2);
    sensitive << ( counter_reg_269 );

    SC_METHOD(thread_counter_cast_cast_fu_511_p1);
    sensitive << ( counter_reg_269 );

    SC_METHOD(thread_empty_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( pos_reg_200 );
    sensitive << ( pos_1_reg_213 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( pos1_cast6_fu_494_p1 );
    sensitive << ( tmp_4_cast_fu_665_p1 );

    SC_METHOD(thread_empty_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_empty_d0);
    sensitive << ( reg_360 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_empty_we0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond3_fu_465_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond2_fu_499_p2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_exitcond1_fu_569_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( column_reg_304 );

    SC_METHOD(thread_exitcond2_fu_499_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( pos1_reg_246 );

    SC_METHOD(thread_exitcond3_fu_465_p2);
    sensitive << ( pos_3_reg_722 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( pos_1_reg_213 );

    SC_METHOD(thread_exitcond_fu_603_p2);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( row_reg_327 );

    SC_METHOD(thread_flag_2_op_fu_585_p2);
    sensitive << ( flag_2_reg_257 );

    SC_METHOD(thread_flag_3_fu_482_p2);
    sensitive << ( flag_1_reg_224 );

    SC_METHOD(thread_flag_4_fu_591_p3);
    sensitive << ( icmp1_reg_777 );
    sensitive << ( flag_2_op_fu_585_p2 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( image2_sum_reg_717 );
    sensitive << ( kernel4_sum_cast_fu_655_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state35 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_icmp1_fu_537_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_7_fu_515_p2 );
    sensitive << ( tmp_5_fu_527_p4 );

    SC_METHOD(thread_icmp_fu_428_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_412_p2 );
    sensitive << ( tmp_3_fu_418_p4 );

    SC_METHOD(thread_image1_fu_393_p4);
    sensitive << ( image_r );

    SC_METHOD(thread_image2_sum_fu_437_p2);
    sensitive << ( tmp_s_reg_706 );
    sensitive << ( image_count_fu_112 );

    SC_METHOD(thread_image_count_1_fu_442_p2);
    sensitive << ( image_count_fu_112 );

    SC_METHOD(thread_kernel4_sum_cast_fu_655_p1);
    sensitive << ( kernel4_sum_reg_848 );

    SC_METHOD(thread_kernel4_sum_fu_650_p2);
    sensitive << ( tmp_6_cast_reg_701 );
    sensitive << ( sum3_cast_cast_fu_646_p1 );

    SC_METHOD(thread_next_mul8_fu_635_p2);
    sensitive << ( phi_mul7_reg_349 );

    SC_METHOD(thread_next_mul_fu_615_p2);
    sensitive << ( phi_mul_reg_338 );

    SC_METHOD(thread_output6_sum_cast_fu_679_p1);
    sensitive << ( output6_sum_reg_810 );

    SC_METHOD(thread_output6_sum_fu_581_p2);
    sensitive << ( tmp_3_cast_reg_696 );
    sensitive << ( counter_cast_cast_reg_764 );

    SC_METHOD(thread_p_position_fu_549_p3);
    sensitive << ( icmp1_fu_537_p2 );
    sensitive << ( position_reg_280 );
    sensitive << ( position_1_fu_543_p2 );

    SC_METHOD(thread_pos1_cast6_fu_494_p1);
    sensitive << ( pos1_reg_246 );

    SC_METHOD(thread_pos_3_fu_453_p2);
    sensitive << ( pos_reg_200 );

    SC_METHOD(thread_pos_4_fu_505_p2);
    sensitive << ( pos1_reg_246 );

    SC_METHOD(thread_pos_5_fu_476_p2);
    sensitive << ( pos_reg_200 );

    SC_METHOD(thread_pos_6_fu_470_p2);
    sensitive << ( pos_1_reg_213 );

    SC_METHOD(thread_position_1_fu_543_p2);
    sensitive << ( position_reg_280 );

    SC_METHOD(thread_position_2_fu_598_p2);
    sensitive << ( p_position_reg_782 );

    SC_METHOD(thread_row_1_fu_609_p2);
    sensitive << ( row_reg_327 );

    SC_METHOD(thread_sum3_cast_cast_fu_646_p1);
    sensitive << ( sum3_fu_641_p2 );

    SC_METHOD(thread_sum3_fu_641_p2);
    sensitive << ( column_cast5_reg_792 );
    sensitive << ( phi_mul7_reg_349 );

    SC_METHOD(thread_tempsum_fu_674_p2);
    sensitive << ( tmp_8_reg_869 );
    sensitive << ( tempsum_2_reg_315 );

    SC_METHOD(thread_tmp1_fu_625_p2);
    sensitive << ( tmp_6_reg_787 );
    sensitive << ( tmp_2_cast7_fu_621_p1 );

    SC_METHOD(thread_tmp_1_fu_365_p4);
    sensitive << ( output_r );

    SC_METHOD(thread_tmp_2_cast7_fu_621_p1);
    sensitive << ( phi_mul_reg_338 );

    SC_METHOD(thread_tmp_2_fu_379_p4);
    sensitive << ( kernel );

    SC_METHOD(thread_tmp_3_cast_fu_375_p1);
    sensitive << ( tmp_1_fu_365_p4 );

    SC_METHOD(thread_tmp_3_fu_418_p4);
    sensitive << ( flag_reg_188 );

    SC_METHOD(thread_tmp_4_cast_fu_665_p1);
    sensitive << ( tmp_4_reg_838 );

    SC_METHOD(thread_tmp_4_fu_630_p2);
    sensitive << ( column_cast4_reg_797 );
    sensitive << ( tmp1_fu_625_p2 );

    SC_METHOD(thread_tmp_5_fu_527_p4);
    sensitive << ( flag_2_reg_257 );

    SC_METHOD(thread_tmp_6_cast_fu_389_p1);
    sensitive << ( tmp_2_fu_379_p4 );

    SC_METHOD(thread_tmp_6_fu_557_p1);
    sensitive << ( p_position_fu_549_p3 );

    SC_METHOD(thread_tmp_7_fu_515_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( position_reg_280 );

    SC_METHOD(thread_tmp_9_fu_488_p2);
    sensitive << ( pos_2_reg_236 );

    SC_METHOD(thread_tmp_fu_412_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pos_reg_200 );

    SC_METHOD(thread_tmp_s_fu_403_p1);
    sensitive << ( image1_fu_393_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_412_p2 );
    sensitive << ( icmp_fu_428_p2 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond3_fu_465_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond2_fu_499_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_7_fu_515_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond1_fu_569_p2 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( exitcond_fu_603_p2 );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "00000000000000000000000000000000001";
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fpga_convolution_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, image_r, "image_r");
    sc_trace(mVcdFile, kernel, "kernel");
    sc_trace(mVcdFile, output_r, "output_r");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, reg_360, "reg_360");
    sc_trace(mVcdFile, tmp_3_cast_fu_375_p1, "tmp_3_cast_fu_375_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_696, "tmp_3_cast_reg_696");
    sc_trace(mVcdFile, tmp_6_cast_fu_389_p1, "tmp_6_cast_fu_389_p1");
    sc_trace(mVcdFile, tmp_6_cast_reg_701, "tmp_6_cast_reg_701");
    sc_trace(mVcdFile, tmp_s_fu_403_p1, "tmp_s_fu_403_p1");
    sc_trace(mVcdFile, tmp_s_reg_706, "tmp_s_reg_706");
    sc_trace(mVcdFile, image2_sum_fu_437_p2, "image2_sum_fu_437_p2");
    sc_trace(mVcdFile, image2_sum_reg_717, "image2_sum_reg_717");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_412_p2, "tmp_fu_412_p2");
    sc_trace(mVcdFile, icmp_fu_428_p2, "icmp_fu_428_p2");
    sc_trace(mVcdFile, pos_3_fu_453_p2, "pos_3_fu_453_p2");
    sc_trace(mVcdFile, pos_3_reg_722, "pos_3_reg_722");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, pos_6_fu_470_p2, "pos_6_fu_470_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, exitcond3_fu_465_p2, "exitcond3_fu_465_p2");
    sc_trace(mVcdFile, pos_5_fu_476_p2, "pos_5_fu_476_p2");
    sc_trace(mVcdFile, flag_3_fu_482_p2, "flag_3_fu_482_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_9_fu_488_p2, "tmp_9_fu_488_p2");
    sc_trace(mVcdFile, pos_4_fu_505_p2, "pos_4_fu_505_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, exitcond2_fu_499_p2, "exitcond2_fu_499_p2");
    sc_trace(mVcdFile, counter_cast_cast_fu_511_p1, "counter_cast_cast_fu_511_p1");
    sc_trace(mVcdFile, counter_cast_cast_reg_764, "counter_cast_cast_reg_764");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, counter_1_fu_521_p2, "counter_1_fu_521_p2");
    sc_trace(mVcdFile, counter_1_reg_772, "counter_1_reg_772");
    sc_trace(mVcdFile, icmp1_fu_537_p2, "icmp1_fu_537_p2");
    sc_trace(mVcdFile, icmp1_reg_777, "icmp1_reg_777");
    sc_trace(mVcdFile, tmp_7_fu_515_p2, "tmp_7_fu_515_p2");
    sc_trace(mVcdFile, p_position_fu_549_p3, "p_position_fu_549_p3");
    sc_trace(mVcdFile, p_position_reg_782, "p_position_reg_782");
    sc_trace(mVcdFile, tmp_6_fu_557_p1, "tmp_6_fu_557_p1");
    sc_trace(mVcdFile, tmp_6_reg_787, "tmp_6_reg_787");
    sc_trace(mVcdFile, column_cast5_fu_561_p1, "column_cast5_fu_561_p1");
    sc_trace(mVcdFile, column_cast5_reg_792, "column_cast5_reg_792");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, column_cast4_fu_565_p1, "column_cast4_fu_565_p1");
    sc_trace(mVcdFile, column_cast4_reg_797, "column_cast4_reg_797");
    sc_trace(mVcdFile, column_1_fu_575_p2, "column_1_fu_575_p2");
    sc_trace(mVcdFile, column_1_reg_805, "column_1_reg_805");
    sc_trace(mVcdFile, output6_sum_fu_581_p2, "output6_sum_fu_581_p2");
    sc_trace(mVcdFile, output6_sum_reg_810, "output6_sum_reg_810");
    sc_trace(mVcdFile, exitcond1_fu_569_p2, "exitcond1_fu_569_p2");
    sc_trace(mVcdFile, flag_4_fu_591_p3, "flag_4_fu_591_p3");
    sc_trace(mVcdFile, flag_4_reg_815, "flag_4_reg_815");
    sc_trace(mVcdFile, position_2_fu_598_p2, "position_2_fu_598_p2");
    sc_trace(mVcdFile, position_2_reg_820, "position_2_reg_820");
    sc_trace(mVcdFile, row_1_fu_609_p2, "row_1_fu_609_p2");
    sc_trace(mVcdFile, row_1_reg_828, "row_1_reg_828");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, next_mul_fu_615_p2, "next_mul_fu_615_p2");
    sc_trace(mVcdFile, next_mul_reg_833, "next_mul_reg_833");
    sc_trace(mVcdFile, exitcond_fu_603_p2, "exitcond_fu_603_p2");
    sc_trace(mVcdFile, tmp_4_fu_630_p2, "tmp_4_fu_630_p2");
    sc_trace(mVcdFile, tmp_4_reg_838, "tmp_4_reg_838");
    sc_trace(mVcdFile, next_mul8_fu_635_p2, "next_mul8_fu_635_p2");
    sc_trace(mVcdFile, next_mul8_reg_843, "next_mul8_reg_843");
    sc_trace(mVcdFile, kernel4_sum_fu_650_p2, "kernel4_sum_fu_650_p2");
    sc_trace(mVcdFile, kernel4_sum_reg_848, "kernel4_sum_reg_848");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, empty_q0, "empty_q0");
    sc_trace(mVcdFile, empty_9_reg_864, "empty_9_reg_864");
    sc_trace(mVcdFile, grp_fu_669_p2, "grp_fu_669_p2");
    sc_trace(mVcdFile, tmp_8_reg_869, "tmp_8_reg_869");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, tempsum_fu_674_p2, "tempsum_fu_674_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, empty_address0, "empty_address0");
    sc_trace(mVcdFile, empty_ce0, "empty_ce0");
    sc_trace(mVcdFile, empty_we0, "empty_we0");
    sc_trace(mVcdFile, empty_d0, "empty_d0");
    sc_trace(mVcdFile, flag_reg_188, "flag_reg_188");
    sc_trace(mVcdFile, pos_reg_200, "pos_reg_200");
    sc_trace(mVcdFile, pos_1_reg_213, "pos_1_reg_213");
    sc_trace(mVcdFile, flag_1_reg_224, "flag_1_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, pos_2_reg_236, "pos_2_reg_236");
    sc_trace(mVcdFile, pos1_reg_246, "pos1_reg_246");
    sc_trace(mVcdFile, flag_2_reg_257, "flag_2_reg_257");
    sc_trace(mVcdFile, counter_reg_269, "counter_reg_269");
    sc_trace(mVcdFile, position_reg_280, "position_reg_280");
    sc_trace(mVcdFile, tempsum_1_reg_291, "tempsum_1_reg_291");
    sc_trace(mVcdFile, column_reg_304, "column_reg_304");
    sc_trace(mVcdFile, tempsum_2_reg_315, "tempsum_2_reg_315");
    sc_trace(mVcdFile, row_reg_327, "row_reg_327");
    sc_trace(mVcdFile, phi_mul_reg_338, "phi_mul_reg_338");
    sc_trace(mVcdFile, phi_mul7_reg_349, "phi_mul7_reg_349");
    sc_trace(mVcdFile, pos1_cast6_fu_494_p1, "pos1_cast6_fu_494_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_665_p1, "tmp_4_cast_fu_665_p1");
    sc_trace(mVcdFile, kernel4_sum_cast_fu_655_p1, "kernel4_sum_cast_fu_655_p1");
    sc_trace(mVcdFile, output6_sum_cast_fu_679_p1, "output6_sum_cast_fu_679_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, image_count_fu_112, "image_count_fu_112");
    sc_trace(mVcdFile, image_count_1_fu_442_p2, "image_count_1_fu_442_p2");
    sc_trace(mVcdFile, tmp_1_fu_365_p4, "tmp_1_fu_365_p4");
    sc_trace(mVcdFile, tmp_2_fu_379_p4, "tmp_2_fu_379_p4");
    sc_trace(mVcdFile, image1_fu_393_p4, "image1_fu_393_p4");
    sc_trace(mVcdFile, tmp_3_fu_418_p4, "tmp_3_fu_418_p4");
    sc_trace(mVcdFile, tmp_5_fu_527_p4, "tmp_5_fu_527_p4");
    sc_trace(mVcdFile, position_1_fu_543_p2, "position_1_fu_543_p2");
    sc_trace(mVcdFile, flag_2_op_fu_585_p2, "flag_2_op_fu_585_p2");
    sc_trace(mVcdFile, tmp_2_cast7_fu_621_p1, "tmp_2_cast7_fu_621_p1");
    sc_trace(mVcdFile, tmp1_fu_625_p2, "tmp1_fu_625_p2");
    sc_trace(mVcdFile, sum3_fu_641_p2, "sum3_fu_641_p2");
    sc_trace(mVcdFile, sum3_cast_cast_fu_646_p1, "sum3_cast_cast_fu_646_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fpga_convolution.hdltvin.dat");
    mHdltvoutHandle.open("fpga_convolution.hdltvout.dat");
}

fpga_convolution::~fpga_convolution() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fpga_convolution_AXILiteS_s_axi_U;
    delete fpga_convolution_gmem_m_axi_U;
    delete empty_U;
    delete fpga_convolution_cud_U0;
}

void fpga_convolution::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fpga_convolution::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void fpga_convolution::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void fpga_convolution::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void fpga_convolution::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void fpga_convolution::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void fpga_convolution::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void fpga_convolution::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void fpga_convolution::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())))) {
            ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read())) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_603_p2.read()))) {
        column_reg_304 = column_1_reg_805.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_515_p2.read()))) {
        column_reg_304 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_499_p2.read()))) {
        counter_reg_269 = ap_const_lv17_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        counter_reg_269 = counter_1_reg_772.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        flag_1_reg_224 = flag_reg_188.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_465_p2.read()))) {
        flag_1_reg_224 = ap_const_lv32_FFFFFFFF;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_499_p2.read()))) {
        flag_2_reg_257 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        flag_2_reg_257 = flag_4_reg_815.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        flag_reg_188 = flag_3_fu_482_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        flag_reg_188 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(icmp_fu_428_p2.read(), ap_const_lv1_0))) {
        image_count_fu_112 = image_count_1_fu_442_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        image_count_fu_112 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_569_p2.read()))) {
        phi_mul7_reg_349 = ap_const_lv7_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        phi_mul7_reg_349 = next_mul8_reg_843.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_569_p2.read()))) {
        phi_mul_reg_338 = ap_const_lv12_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        phi_mul_reg_338 = next_mul_reg_833.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_0))) {
        pos1_reg_246 = ap_const_lv17_10A00;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_499_p2.read()))) {
        pos1_reg_246 = pos_4_fu_505_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_465_p2.read()))) {
        pos_1_reg_213 = pos_6_fu_470_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_428_p2.read()))) {
        pos_1_reg_213 = pos_reg_200.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pos_2_reg_236 = pos_reg_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_465_p2.read()))) {
        pos_2_reg_236 = pos_5_fu_476_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        pos_reg_200 = tmp_9_fu_488_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        pos_reg_200 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_499_p2.read()))) {
        position_reg_280 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        position_reg_280 = position_2_reg_820.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_569_p2.read()))) {
        row_reg_327 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        row_reg_327 = row_1_reg_828.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_603_p2.read()))) {
        tempsum_1_reg_291 = tempsum_2_reg_315.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_515_p2.read()))) {
        tempsum_1_reg_291 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_569_p2.read()))) {
        tempsum_2_reg_315 = tempsum_1_reg_291.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        tempsum_2_reg_315 = tempsum_fu_674_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        column_1_reg_805 = column_1_fu_575_p2.read();
        column_cast4_reg_797 = column_cast4_fu_565_p1.read();
        column_cast5_reg_792 = column_cast5_fu_561_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        counter_1_reg_772 = counter_1_fu_521_p2.read();
        counter_cast_cast_reg_764 = counter_cast_cast_fu_511_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
        empty_9_reg_864 = empty_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_569_p2.read()))) {
        flag_4_reg_815 = flag_4_fu_591_p3.read();
        output6_sum_reg_810 = output6_sum_fu_581_p2.read();
        position_2_reg_820 = position_2_fu_598_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_515_p2.read()))) {
        icmp1_reg_777 = icmp1_fu_537_p2.read();
        p_position_reg_782 = p_position_fu_549_p3.read();
        tmp_6_reg_787 = tmp_6_fu_557_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_fu_428_p2.read(), ap_const_lv1_0))) {
        image2_sum_reg_717 = image2_sum_fu_437_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_603_p2.read()))) {
        kernel4_sum_reg_848 = kernel4_sum_fu_650_p2.read();
        next_mul8_reg_843 = next_mul8_fu_635_p2.read();
        next_mul_reg_833 = next_mul_fu_615_p2.read();
        tmp_4_reg_838 = tmp_4_fu_630_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_428_p2.read()))) {
        pos_3_reg_722 = pos_3_fu_453_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
  esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
  esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)))) {
        reg_360 = gmem_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        row_1_reg_828 = row_1_fu_609_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_3_cast_reg_696 = tmp_3_cast_fu_375_p1.read();
        tmp_6_cast_reg_701 = tmp_6_cast_fu_389_p1.read();
        tmp_s_reg_706 = tmp_s_fu_403_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_8_reg_869 = grp_fu_669_p2.read();
    }
}

void fpga_convolution::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fpga_convolution::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fpga_convolution::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void fpga_convolution::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void fpga_convolution::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void fpga_convolution::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fpga_convolution::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fpga_convolution::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void fpga_convolution::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fpga_convolution::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fpga_convolution::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fpga_convolution::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void fpga_convolution::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void fpga_convolution::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void fpga_convolution::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void fpga_convolution::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void fpga_convolution::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void fpga_convolution::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fpga_convolution::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void fpga_convolution::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void fpga_convolution::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_515_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fpga_convolution::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fpga_convolution::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_515_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fpga_convolution::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fpga_convolution::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void fpga_convolution::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void fpga_convolution::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void fpga_convolution::thread_column_1_fu_575_p2() {
    column_1_fu_575_p2 = (!column_reg_304.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(column_reg_304.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fpga_convolution::thread_column_cast4_fu_565_p1() {
    column_cast4_fu_565_p1 = esl_zext<18,4>(column_reg_304.read());
}

void fpga_convolution::thread_column_cast5_fu_561_p1() {
    column_cast5_fu_561_p1 = esl_zext<7,4>(column_reg_304.read());
}

void fpga_convolution::thread_counter_1_fu_521_p2() {
    counter_1_fu_521_p2 = (!counter_reg_269.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(counter_reg_269.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void fpga_convolution::thread_counter_cast_cast_fu_511_p1() {
    counter_cast_cast_fu_511_p1 = esl_zext<31,17>(counter_reg_269.read());
}

void fpga_convolution::thread_empty_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        empty_address0 =  (sc_lv<17>) (tmp_4_cast_fu_665_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        empty_address0 =  (sc_lv<17>) (pos1_cast6_fu_494_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        empty_address0 =  (sc_lv<17>) (pos_1_reg_213.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        empty_address0 =  (sc_lv<17>) (pos_reg_200.read());
    } else {
        empty_address0 = "XXXXXXXXXXXXXXXXX";
    }
}

void fpga_convolution::thread_empty_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        empty_ce0 = ap_const_logic_1;
    } else {
        empty_ce0 = ap_const_logic_0;
    }
}

void fpga_convolution::thread_empty_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        empty_d0 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        empty_d0 = reg_360.read();
    } else {
        empty_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fpga_convolution::thread_empty_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_465_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_499_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        empty_we0 = ap_const_logic_1;
    } else {
        empty_we0 = ap_const_logic_0;
    }
}

void fpga_convolution::thread_exitcond1_fu_569_p2() {
    exitcond1_fu_569_p2 = (!column_reg_304.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(column_reg_304.read() == ap_const_lv4_B);
}

void fpga_convolution::thread_exitcond2_fu_499_p2() {
    exitcond2_fu_499_p2 = (!pos1_reg_246.read().is_01() || !ap_const_lv17_11464.is_01())? sc_lv<1>(): sc_lv<1>(pos1_reg_246.read() == ap_const_lv17_11464);
}

void fpga_convolution::thread_exitcond3_fu_465_p2() {
    exitcond3_fu_465_p2 = (!pos_1_reg_213.read().is_01() || !pos_3_reg_722.read().is_01())? sc_lv<1>(): sc_lv<1>(pos_1_reg_213.read() == pos_3_reg_722.read());
}

void fpga_convolution::thread_exitcond_fu_603_p2() {
    exitcond_fu_603_p2 = (!row_reg_327.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(row_reg_327.read() == ap_const_lv4_B);
}

void fpga_convolution::thread_flag_2_op_fu_585_p2() {
    flag_2_op_fu_585_p2 = (!flag_2_reg_257.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(flag_2_reg_257.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fpga_convolution::thread_flag_3_fu_482_p2() {
    flag_3_fu_482_p2 = (!flag_1_reg_224.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(flag_1_reg_224.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fpga_convolution::thread_flag_4_fu_591_p3() {
    flag_4_fu_591_p3 = (!icmp1_reg_777.read()[0].is_01())? sc_lv<32>(): ((icmp1_reg_777.read()[0].to_bool())? ap_const_lv32_1: flag_2_op_fu_585_p2.read());
}

void fpga_convolution::thread_gmem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            gmem_ARADDR = kernel4_sum_cast_fu_655_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            gmem_ARADDR = image2_sum_reg_717.read();
        } else {
            gmem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        gmem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fpga_convolution::thread_gmem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void fpga_convolution::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void fpga_convolution::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void fpga_convolution::thread_gmem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1)))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void fpga_convolution::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void fpga_convolution::thread_gmem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void fpga_convolution::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void fpga_convolution::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void fpga_convolution::thread_gmem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void fpga_convolution::thread_gmem_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void fpga_convolution::thread_icmp1_fu_537_p2() {
    icmp1_fu_537_p2 = (!tmp_5_fu_527_p4.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(tmp_5_fu_527_p4.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void fpga_convolution::thread_icmp_fu_428_p2() {
    icmp_fu_428_p2 = (!tmp_3_fu_418_p4.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(tmp_3_fu_418_p4.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void fpga_convolution::thread_image1_fu_393_p4() {
    image1_fu_393_p4 = image_r.read().range(31, 2);
}

void fpga_convolution::thread_image2_sum_fu_437_p2() {
    image2_sum_fu_437_p2 = (!tmp_s_reg_706.read().is_01() || !image_count_fu_112.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_reg_706.read()) + sc_biguint<32>(image_count_fu_112.read()));
}

void fpga_convolution::thread_image_count_1_fu_442_p2() {
    image_count_1_fu_442_p2 = (!image_count_fu_112.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(image_count_fu_112.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fpga_convolution::thread_kernel4_sum_cast_fu_655_p1() {
    kernel4_sum_cast_fu_655_p1 = esl_zext<32,31>(kernel4_sum_reg_848.read());
}

void fpga_convolution::thread_kernel4_sum_fu_650_p2() {
    kernel4_sum_fu_650_p2 = (!sum3_cast_cast_fu_646_p1.read().is_01() || !tmp_6_cast_reg_701.read().is_01())? sc_lv<31>(): (sc_biguint<31>(sum3_cast_cast_fu_646_p1.read()) + sc_biguint<31>(tmp_6_cast_reg_701.read()));
}

void fpga_convolution::thread_next_mul8_fu_635_p2() {
    next_mul8_fu_635_p2 = (!phi_mul7_reg_349.read().is_01() || !ap_const_lv7_B.is_01())? sc_lv<7>(): (sc_biguint<7>(phi_mul7_reg_349.read()) + sc_biguint<7>(ap_const_lv7_B));
}

void fpga_convolution::thread_next_mul_fu_615_p2() {
    next_mul_fu_615_p2 = (!phi_mul_reg_338.read().is_01() || !ap_const_lv12_10A.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul_reg_338.read()) + sc_biguint<12>(ap_const_lv12_10A));
}

void fpga_convolution::thread_output6_sum_cast_fu_679_p1() {
    output6_sum_cast_fu_679_p1 = esl_zext<32,31>(output6_sum_reg_810.read());
}

void fpga_convolution::thread_output6_sum_fu_581_p2() {
    output6_sum_fu_581_p2 = (!tmp_3_cast_reg_696.read().is_01() || !counter_cast_cast_reg_764.read().is_01())? sc_lv<31>(): (sc_biguint<31>(tmp_3_cast_reg_696.read()) + sc_biguint<31>(counter_cast_cast_reg_764.read()));
}

void fpga_convolution::thread_p_position_fu_549_p3() {
    p_position_fu_549_p3 = (!icmp1_fu_537_p2.read()[0].is_01())? sc_lv<32>(): ((icmp1_fu_537_p2.read()[0].to_bool())? position_1_fu_543_p2.read(): position_reg_280.read());
}

void fpga_convolution::thread_pos1_cast6_fu_494_p1() {
    pos1_cast6_fu_494_p1 = esl_zext<32,17>(pos1_reg_246.read());
}

void fpga_convolution::thread_pos_3_fu_453_p2() {
    pos_3_fu_453_p2 = (!pos_reg_200.read().is_01() || !ap_const_lv32_A.is_01())? sc_lv<32>(): (sc_biguint<32>(pos_reg_200.read()) + sc_biguint<32>(ap_const_lv32_A));
}

void fpga_convolution::thread_pos_4_fu_505_p2() {
    pos_4_fu_505_p2 = (!pos1_reg_246.read().is_01() || !ap_const_lv17_1.is_01())? sc_lv<17>(): (sc_biguint<17>(pos1_reg_246.read()) + sc_biguint<17>(ap_const_lv17_1));
}

void fpga_convolution::thread_pos_5_fu_476_p2() {
    pos_5_fu_476_p2 = (!pos_reg_200.read().is_01() || !ap_const_lv32_9.is_01())? sc_lv<32>(): (sc_biguint<32>(pos_reg_200.read()) + sc_biguint<32>(ap_const_lv32_9));
}

void fpga_convolution::thread_pos_6_fu_470_p2() {
    pos_6_fu_470_p2 = (!pos_1_reg_213.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(pos_1_reg_213.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fpga_convolution::thread_position_1_fu_543_p2() {
    position_1_fu_543_p2 = (!ap_const_lv32_A.is_01() || !position_reg_280.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_A) + sc_biguint<32>(position_reg_280.read()));
}

void fpga_convolution::thread_position_2_fu_598_p2() {
    position_2_fu_598_p2 = (!p_position_reg_782.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(p_position_reg_782.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fpga_convolution::thread_row_1_fu_609_p2() {
    row_1_fu_609_p2 = (!row_reg_327.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(row_reg_327.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fpga_convolution::thread_sum3_cast_cast_fu_646_p1() {
    sum3_cast_cast_fu_646_p1 = esl_zext<31,7>(sum3_fu_641_p2.read());
}

void fpga_convolution::thread_sum3_fu_641_p2() {
    sum3_fu_641_p2 = (!column_cast5_reg_792.read().is_01() || !phi_mul7_reg_349.read().is_01())? sc_lv<7>(): (sc_biguint<7>(column_cast5_reg_792.read()) + sc_biguint<7>(phi_mul7_reg_349.read()));
}

void fpga_convolution::thread_tempsum_fu_674_p2() {
    tempsum_fu_674_p2 = (!tempsum_2_reg_315.read().is_01() || !tmp_8_reg_869.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tempsum_2_reg_315.read()) + sc_biguint<32>(tmp_8_reg_869.read()));
}

void fpga_convolution::thread_tmp1_fu_625_p2() {
    tmp1_fu_625_p2 = (!tmp_2_cast7_fu_621_p1.read().is_01() || !tmp_6_reg_787.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_2_cast7_fu_621_p1.read()) + sc_biguint<18>(tmp_6_reg_787.read()));
}

void fpga_convolution::thread_tmp_1_fu_365_p4() {
    tmp_1_fu_365_p4 = output_r.read().range(31, 2);
}

void fpga_convolution::thread_tmp_2_cast7_fu_621_p1() {
    tmp_2_cast7_fu_621_p1 = esl_zext<18,12>(phi_mul_reg_338.read());
}

void fpga_convolution::thread_tmp_2_fu_379_p4() {
    tmp_2_fu_379_p4 = kernel.read().range(31, 2);
}

void fpga_convolution::thread_tmp_3_cast_fu_375_p1() {
    tmp_3_cast_fu_375_p1 = esl_zext<31,30>(tmp_1_fu_365_p4.read());
}

void fpga_convolution::thread_tmp_3_fu_418_p4() {
    tmp_3_fu_418_p4 = flag_reg_188.read().range(31, 8);
}

void fpga_convolution::thread_tmp_4_cast_fu_665_p1() {
    tmp_4_cast_fu_665_p1 = esl_zext<32,18>(tmp_4_reg_838.read());
}

void fpga_convolution::thread_tmp_4_fu_630_p2() {
    tmp_4_fu_630_p2 = (!column_cast4_reg_797.read().is_01() || !tmp1_fu_625_p2.read().is_01())? sc_lv<18>(): (sc_biguint<18>(column_cast4_reg_797.read()) + sc_biguint<18>(tmp1_fu_625_p2.read()));
}

void fpga_convolution::thread_tmp_5_fu_527_p4() {
    tmp_5_fu_527_p4 = flag_2_reg_257.read().range(31, 8);
}

void fpga_convolution::thread_tmp_6_cast_fu_389_p1() {
    tmp_6_cast_fu_389_p1 = esl_zext<31,30>(tmp_2_fu_379_p4.read());
}

void fpga_convolution::thread_tmp_6_fu_557_p1() {
    tmp_6_fu_557_p1 = p_position_fu_549_p3.read().range(18-1, 0);
}

void fpga_convolution::thread_tmp_7_fu_515_p2() {
    tmp_7_fu_515_p2 = (!position_reg_280.read().is_01() || !ap_const_lv32_109F6.is_01())? sc_lv<1>(): (sc_bigint<32>(position_reg_280.read()) < sc_bigint<32>(ap_const_lv32_109F6));
}

void fpga_convolution::thread_tmp_9_fu_488_p2() {
    tmp_9_fu_488_p2 = (!pos_2_reg_236.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(pos_2_reg_236.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void fpga_convolution::thread_tmp_fu_412_p2() {
    tmp_fu_412_p2 = (!pos_reg_200.read().is_01() || !ap_const_lv32_10A00.is_01())? sc_lv<1>(): (sc_bigint<32>(pos_reg_200.read()) < sc_bigint<32>(ap_const_lv32_10A00));
}

void fpga_convolution::thread_tmp_s_fu_403_p1() {
    tmp_s_fu_403_p1 = esl_zext<32,30>(image1_fu_393_p4.read());
}

void fpga_convolution::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_412_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_428_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_465_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_499_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_515_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_569_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_603_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<35>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fpga_convolution::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

