// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fpga_convolution,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=258,HLS_SYN_DSP=4,HLS_SYN_FF=3306,HLS_SYN_LUT=2069}" *)

module fpga_convolution (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] image_r;
wire   [31:0] kernel;
wire   [31:0] output_r;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state25;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state29;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state30;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state35;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg  signed [31:0] reg_360;
wire   [30:0] tmp_3_cast_fu_375_p1;
reg   [30:0] tmp_3_cast_reg_696;
wire   [30:0] tmp_6_cast_fu_389_p1;
reg   [30:0] tmp_6_cast_reg_701;
wire   [31:0] tmp_s_fu_403_p1;
reg   [31:0] tmp_s_reg_706;
wire   [31:0] image2_sum_fu_437_p2;
reg   [31:0] image2_sum_reg_717;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_412_p2;
wire   [0:0] icmp_fu_428_p2;
wire   [31:0] pos_3_fu_453_p2;
reg   [31:0] pos_3_reg_722;
reg    ap_sig_ioackin_gmem_ARREADY;
wire   [31:0] pos_6_fu_470_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond3_fu_465_p2;
wire   [31:0] pos_5_fu_476_p2;
wire   [31:0] flag_3_fu_482_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] tmp_9_fu_488_p2;
wire   [16:0] pos_4_fu_505_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond2_fu_499_p2;
wire   [30:0] counter_cast_cast_fu_511_p1;
reg   [30:0] counter_cast_cast_reg_764;
wire    ap_CS_fsm_state15;
wire   [16:0] counter_1_fu_521_p2;
reg   [16:0] counter_1_reg_772;
wire   [0:0] icmp1_fu_537_p2;
reg   [0:0] icmp1_reg_777;
wire   [0:0] tmp_7_fu_515_p2;
wire   [31:0] p_position_fu_549_p3;
reg   [31:0] p_position_reg_782;
wire   [17:0] tmp_6_fu_557_p1;
reg   [17:0] tmp_6_reg_787;
wire   [6:0] column_cast5_fu_561_p1;
reg   [6:0] column_cast5_reg_792;
wire    ap_CS_fsm_state16;
wire   [17:0] column_cast4_fu_565_p1;
reg   [17:0] column_cast4_reg_797;
wire   [3:0] column_1_fu_575_p2;
reg   [3:0] column_1_reg_805;
wire   [30:0] output6_sum_fu_581_p2;
reg   [30:0] output6_sum_reg_810;
wire   [0:0] exitcond1_fu_569_p2;
wire   [31:0] flag_4_fu_591_p3;
reg   [31:0] flag_4_reg_815;
wire   [31:0] position_2_fu_598_p2;
reg   [31:0] position_2_reg_820;
wire   [3:0] row_1_fu_609_p2;
reg   [3:0] row_1_reg_828;
wire    ap_CS_fsm_state17;
wire   [11:0] next_mul_fu_615_p2;
reg   [11:0] next_mul_reg_833;
wire   [0:0] exitcond_fu_603_p2;
wire   [17:0] tmp_4_fu_630_p2;
reg   [17:0] tmp_4_reg_838;
wire   [6:0] next_mul8_fu_635_p2;
reg   [6:0] next_mul8_reg_843;
wire   [30:0] kernel4_sum_fu_650_p2;
reg   [30:0] kernel4_sum_reg_848;
wire    ap_CS_fsm_state24;
wire   [31:0] empty_q0;
reg  signed [31:0] empty_9_reg_864;
wire   [31:0] grp_fu_669_p2;
reg   [31:0] tmp_8_reg_869;
wire    ap_CS_fsm_state27;
wire   [31:0] tempsum_fu_674_p2;
wire    ap_CS_fsm_state28;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [16:0] empty_address0;
reg    empty_ce0;
reg    empty_we0;
reg   [31:0] empty_d0;
reg   [31:0] flag_reg_188;
reg   [31:0] pos_reg_200;
reg   [31:0] pos_1_reg_213;
reg   [31:0] flag_1_reg_224;
wire    ap_CS_fsm_state11;
reg   [31:0] pos_2_reg_236;
reg   [16:0] pos1_reg_246;
reg   [31:0] flag_2_reg_257;
reg   [16:0] counter_reg_269;
reg   [31:0] position_reg_280;
reg   [31:0] tempsum_1_reg_291;
reg   [3:0] column_reg_304;
reg   [31:0] tempsum_2_reg_315;
reg   [3:0] row_reg_327;
reg   [11:0] phi_mul_reg_338;
reg   [6:0] phi_mul7_reg_349;
wire   [31:0] pos1_cast6_fu_494_p1;
wire   [31:0] tmp_4_cast_fu_665_p1;
wire   [31:0] kernel4_sum_cast_fu_655_p1;
wire   [31:0] output6_sum_cast_fu_679_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [31:0] image_count_fu_112;
wire   [31:0] image_count_1_fu_442_p2;
wire   [29:0] tmp_1_fu_365_p4;
wire   [29:0] tmp_2_fu_379_p4;
wire   [29:0] image1_fu_393_p4;
wire   [23:0] tmp_3_fu_418_p4;
wire   [23:0] tmp_5_fu_527_p4;
wire   [31:0] position_1_fu_543_p2;
wire   [31:0] flag_2_op_fu_585_p2;
wire   [17:0] tmp_2_cast7_fu_621_p1;
wire   [17:0] tmp1_fu_625_p2;
wire   [6:0] sum3_fu_641_p2;
wire   [30:0] sum3_cast_cast_fu_646_p1;
wire    ap_CS_fsm_state26;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

fpga_convolution_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fpga_convolution_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .image_r(image_r),
    .kernel(kernel),
    .output_r(output_r)
);

fpga_convolution_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
fpga_convolution_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(output6_sum_cast_fu_679_p1),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tempsum_1_reg_291),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fpga_convolution_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 70756 ),
    .AddressWidth( 17 ))
empty_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(empty_address0),
    .ce0(empty_ce0),
    .we0(empty_we0),
    .d0(empty_d0),
    .q0(empty_q0)
);

fpga_convolution_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fpga_convolution_cud_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_9_reg_864),
    .din1(reg_360),
    .ce(1'b1),
    .dout(grp_fu_669_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((1'b1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == exitcond_fu_603_p2))) begin
        column_reg_304 <= column_1_reg_805;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == tmp_7_fu_515_p2))) begin
        column_reg_304 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond2_fu_499_p2))) begin
        counter_reg_269 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (gmem_BVALID == 1'b1))) begin
        counter_reg_269 <= counter_1_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        flag_1_reg_224 <= flag_reg_188;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond3_fu_465_p2))) begin
        flag_1_reg_224 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond2_fu_499_p2))) begin
        flag_2_reg_257 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (gmem_BVALID == 1'b1))) begin
        flag_2_reg_257 <= flag_4_reg_815;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        flag_reg_188 <= flag_3_fu_482_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        flag_reg_188 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd1) & (icmp_fu_428_p2 == 1'd0))) begin
        image_count_fu_112 <= image_count_1_fu_442_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        image_count_fu_112 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == exitcond1_fu_569_p2))) begin
        phi_mul7_reg_349 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        phi_mul7_reg_349 <= next_mul8_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == exitcond1_fu_569_p2))) begin
        phi_mul_reg_338 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        phi_mul_reg_338 <= next_mul_reg_833;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd0))) begin
        pos1_reg_246 <= 17'd68096;
    end else if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond2_fu_499_p2))) begin
        pos1_reg_246 <= pos_4_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond3_fu_465_p2))) begin
        pos_1_reg_213 <= pos_6_fu_470_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd1) & (1'd1 == icmp_fu_428_p2))) begin
        pos_1_reg_213 <= pos_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pos_2_reg_236 <= pos_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond3_fu_465_p2))) begin
        pos_2_reg_236 <= pos_5_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pos_reg_200 <= tmp_9_fu_488_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pos_reg_200 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond2_fu_499_p2))) begin
        position_reg_280 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (gmem_BVALID == 1'b1))) begin
        position_reg_280 <= position_2_reg_820;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == exitcond1_fu_569_p2))) begin
        row_reg_327 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        row_reg_327 <= row_1_reg_828;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == exitcond_fu_603_p2))) begin
        tempsum_1_reg_291 <= tempsum_2_reg_315;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == tmp_7_fu_515_p2))) begin
        tempsum_1_reg_291 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == exitcond1_fu_569_p2))) begin
        tempsum_2_reg_315 <= tempsum_1_reg_291;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        tempsum_2_reg_315 <= tempsum_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        column_1_reg_805 <= column_1_fu_575_p2;
        column_cast4_reg_797[3 : 0] <= column_cast4_fu_565_p1[3 : 0];
        column_cast5_reg_792[3 : 0] <= column_cast5_fu_561_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        counter_1_reg_772 <= counter_1_fu_521_p2;
        counter_cast_cast_reg_764[16 : 0] <= counter_cast_cast_fu_511_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (gmem_RVALID == 1'b1))) begin
        empty_9_reg_864 <= empty_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == exitcond1_fu_569_p2))) begin
        flag_4_reg_815 <= flag_4_fu_591_p3;
        output6_sum_reg_810 <= output6_sum_fu_581_p2;
        position_2_reg_820 <= position_2_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == tmp_7_fu_515_p2))) begin
        icmp1_reg_777 <= icmp1_fu_537_p2;
        p_position_reg_782 <= p_position_fu_549_p3;
        tmp_6_reg_787 <= tmp_6_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd1) & (icmp_fu_428_p2 == 1'd0))) begin
        image2_sum_reg_717 <= image2_sum_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'd0 == exitcond_fu_603_p2))) begin
        kernel4_sum_reg_848 <= kernel4_sum_fu_650_p2;
        next_mul8_reg_843 <= next_mul8_fu_635_p2;
        next_mul_reg_833 <= next_mul_fu_615_p2;
        tmp_4_reg_838 <= tmp_4_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd1) & (1'd1 == icmp_fu_428_p2))) begin
        pos_3_reg_722 <= pos_3_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (gmem_RVALID == 1'b1)))) begin
        reg_360 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        row_1_reg_828 <= row_1_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_3_cast_reg_696[29 : 0] <= tmp_3_cast_fu_375_p1[29 : 0];
        tmp_6_cast_reg_701[29 : 0] <= tmp_6_cast_fu_389_p1[29 : 0];
        tmp_s_reg_706[29 : 0] <= tmp_s_fu_403_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_8_reg_869 <= grp_fu_669_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == tmp_7_fu_515_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == tmp_7_fu_515_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        empty_address0 = tmp_4_cast_fu_665_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_address0 = pos1_cast6_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_address0 = pos_1_reg_213;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_address0 = pos_reg_200;
    end else begin
        empty_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state11))) begin
        empty_ce0 = 1'b1;
    end else begin
        empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14))) begin
        empty_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_d0 = reg_360;
    end else begin
        empty_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond3_fu_465_p2)) | ((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond2_fu_499_p2)) | (1'b1 == ap_CS_fsm_state11))) begin
        empty_we0 = 1'b1;
    end else begin
        empty_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            gmem_ARADDR = kernel4_sum_cast_fu_655_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = image2_sum_reg_717;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (gmem_BVALID == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (gmem_RVALID == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state25))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_412_p2 == 1'd1) & (1'd1 == icmp_fu_428_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond3_fu_465_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond2_fu_499_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == tmp_7_fu_515_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == exitcond1_fu_569_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == exitcond_fu_603_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_gmem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign column_1_fu_575_p2 = (column_reg_304 + 4'd1);

assign column_cast4_fu_565_p1 = column_reg_304;

assign column_cast5_fu_561_p1 = column_reg_304;

assign counter_1_fu_521_p2 = (counter_reg_269 + 17'd1);

assign counter_cast_cast_fu_511_p1 = counter_reg_269;

assign exitcond1_fu_569_p2 = ((column_reg_304 == 4'd11) ? 1'b1 : 1'b0);

assign exitcond2_fu_499_p2 = ((pos1_reg_246 == 17'd70756) ? 1'b1 : 1'b0);

assign exitcond3_fu_465_p2 = ((pos_1_reg_213 == pos_3_reg_722) ? 1'b1 : 1'b0);

assign exitcond_fu_603_p2 = ((row_reg_327 == 4'd11) ? 1'b1 : 1'b0);

assign flag_2_op_fu_585_p2 = (flag_2_reg_257 + 32'd1);

assign flag_3_fu_482_p2 = (flag_1_reg_224 + 32'd1);

assign flag_4_fu_591_p3 = ((icmp1_reg_777[0:0] === 1'b1) ? 32'd1 : flag_2_op_fu_585_p2);

assign icmp1_fu_537_p2 = (($signed(tmp_5_fu_527_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_428_p2 = (($signed(tmp_3_fu_418_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign image1_fu_393_p4 = {{image_r[31:2]}};

assign image2_sum_fu_437_p2 = (tmp_s_reg_706 + image_count_fu_112);

assign image_count_1_fu_442_p2 = (image_count_fu_112 + 32'd1);

assign kernel4_sum_cast_fu_655_p1 = kernel4_sum_reg_848;

assign kernel4_sum_fu_650_p2 = (sum3_cast_cast_fu_646_p1 + tmp_6_cast_reg_701);

assign next_mul8_fu_635_p2 = (phi_mul7_reg_349 + 7'd11);

assign next_mul_fu_615_p2 = (phi_mul_reg_338 + 12'd266);

assign output6_sum_cast_fu_679_p1 = output6_sum_reg_810;

assign output6_sum_fu_581_p2 = (tmp_3_cast_reg_696 + counter_cast_cast_reg_764);

assign p_position_fu_549_p3 = ((icmp1_fu_537_p2[0:0] === 1'b1) ? position_1_fu_543_p2 : position_reg_280);

assign pos1_cast6_fu_494_p1 = pos1_reg_246;

assign pos_3_fu_453_p2 = (pos_reg_200 + 32'd10);

assign pos_4_fu_505_p2 = (pos1_reg_246 + 17'd1);

assign pos_5_fu_476_p2 = (pos_reg_200 + 32'd9);

assign pos_6_fu_470_p2 = (pos_1_reg_213 + 32'd1);

assign position_1_fu_543_p2 = (32'd10 + position_reg_280);

assign position_2_fu_598_p2 = (p_position_reg_782 + 32'd1);

assign row_1_fu_609_p2 = (row_reg_327 + 4'd1);

assign sum3_cast_cast_fu_646_p1 = sum3_fu_641_p2;

assign sum3_fu_641_p2 = (column_cast5_reg_792 + phi_mul7_reg_349);

assign tempsum_fu_674_p2 = (tempsum_2_reg_315 + tmp_8_reg_869);

assign tmp1_fu_625_p2 = (tmp_2_cast7_fu_621_p1 + tmp_6_reg_787);

assign tmp_1_fu_365_p4 = {{output_r[31:2]}};

assign tmp_2_cast7_fu_621_p1 = phi_mul_reg_338;

assign tmp_2_fu_379_p4 = {{kernel[31:2]}};

assign tmp_3_cast_fu_375_p1 = tmp_1_fu_365_p4;

assign tmp_3_fu_418_p4 = {{flag_reg_188[31:8]}};

assign tmp_4_cast_fu_665_p1 = tmp_4_reg_838;

assign tmp_4_fu_630_p2 = (column_cast4_reg_797 + tmp1_fu_625_p2);

assign tmp_5_fu_527_p4 = {{flag_2_reg_257[31:8]}};

assign tmp_6_cast_fu_389_p1 = tmp_2_fu_379_p4;

assign tmp_6_fu_557_p1 = p_position_fu_549_p3[17:0];

assign tmp_7_fu_515_p2 = (($signed(position_reg_280) < $signed(32'd68086)) ? 1'b1 : 1'b0);

assign tmp_9_fu_488_p2 = (pos_2_reg_236 + 32'd1);

assign tmp_fu_412_p2 = (($signed(pos_reg_200) < $signed(32'd68096)) ? 1'b1 : 1'b0);

assign tmp_s_fu_403_p1 = image1_fu_393_p4;

always @ (posedge ap_clk) begin
    tmp_3_cast_reg_696[30] <= 1'b0;
    tmp_6_cast_reg_701[30] <= 1'b0;
    tmp_s_reg_706[31:30] <= 2'b00;
    counter_cast_cast_reg_764[30:17] <= 14'b00000000000000;
    column_cast5_reg_792[6:4] <= 3'b000;
    column_cast4_reg_797[17:4] <= 14'b00000000000000;
end

endmodule //fpga_convolution
